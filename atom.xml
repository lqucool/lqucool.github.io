<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Make the ideas fly</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lqucool.github.io/"/>
  <updated>2017-11-21T16:00:00.000Z</updated>
  <id>https://lqucool.github.io/</id>
  
  <author>
    <name>Qu.L</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高度切换</title>
    <link href="https://lqucool.github.io/2017/11/22/%E9%AB%98%E5%BA%A6%E5%88%87%E6%8D%A2/"/>
    <id>https://lqucool.github.io/2017/11/22/高度切换/</id>
    <published>2017-11-21T16:00:00.000Z</published>
    <updated>2017-11-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>高度控制时有两种模式，一种是地形跟随，另外一种就是地形突变时，飞行器高度不跟随地形改变。</p><p>地形跟随模式就直接用对地测距数据融合加计就可以了。</p><p>第二种模式的话就需要在测距数据发生突变的时候，切换到气压高度。但是切换的时候要进行数据对齐，并且在测距数据一定时间稳定的时候再切换回测距的高度。油门发生改变的时候，是直接对垂直方向进行控速的，所以这时候可以直接把高度和测距的高度对齐。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">alt_check_valid</span><span class="params">(<span class="keyword">float</span> alt_laser, <span class="keyword">float</span> alt_baro, <span class="keyword">float</span> vel_laser, <span class="keyword">float</span> vel_baro)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">/*  state:  转换状态</span></div><div class="line"><span class="comment">     *  0:  alt来源为激光</span></div><div class="line"><span class="comment">     *  1:  alt来源由激光切换到气压</span></div><div class="line"><span class="comment">     *  2:  alt来源由气压切换到激光</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> state           = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num              = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> alt            = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> align          = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> laser_buf[<span class="number">20</span>]  = &#123;<span class="number">0.0f</span>&#125;;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> baro_buf[<span class="number">20</span>]   = &#123;<span class="number">0.0f</span>&#125;;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count            = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> vel                   = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++)&#123;</div><div class="line">        laser_buf[i] = laser_buf[i+<span class="number">1</span>];</div><div class="line">        baro_buf[i]  = baro_buf[i+<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    laser_buf[<span class="number">19</span>] = alt_laser;</div><div class="line">    baro_buf[<span class="number">19</span>]  = alt_baro;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count &lt; <span class="number">20</span>)  count++;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(count &gt;= <span class="number">19</span>)&#123;</div><div class="line">        <span class="comment">// 气压速度大于0.1m/s时视为非悬停状态，此时不做切换</span></div><div class="line">        <span class="comment">// todo: 此值可能需要调整</span></div><div class="line">        <span class="keyword">if</span>( <span class="built_in">abs</span>((alt_laser - laser_buf[<span class="number">1</span>]) - (alt_baro  - baro_buf[<span class="number">1</span>])) &gt; <span class="number">0.05f</span> )&#123;</div><div class="line">            <span class="keyword">if</span>( state != <span class="number">1</span>)&#123;</div><div class="line">                align = alt - alt_baro;      <span class="comment">// 切换到气压数据前，记录气压的对齐值</span></div><div class="line">            &#125;</div><div class="line">            state = <span class="number">1</span>;</div><div class="line">            num = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( state == <span class="number">1</span> )&#123;</div><div class="line">            num++;</div><div class="line">            <span class="keyword">if</span>(num == <span class="number">400</span>)&#123;                 <span class="comment">//满足1s内数据平稳才能切换回激光数据，防止某些条件下频繁切换</span></div><div class="line">                num = <span class="number">0</span>;</div><div class="line">                state = <span class="number">2</span>;                  <span class="comment">// 切换回激光数据</span></div><div class="line">                align = alt - alt_laser;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span>(state)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span> : alt = alt_laser; vel = vel_laser; <span class="keyword">break</span>;            <span class="comment">//采用激光高度，不发生切换</span></div><div class="line">        <span class="keyword">case</span> <span class="number">1</span> : alt = alt_baro  + align; vel = vel_baro; <span class="keyword">break</span>;     <span class="comment">//切换为气压，并对齐 </span></div><div class="line">        <span class="keyword">case</span> <span class="number">2</span> : alt = alt_laser + align; vel = vel_laser; <span class="keyword">break</span>; <span class="comment">//切换为激光，并对齐 </span></div><div class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;高度控制时有两种模式，一种是地形跟随，另外一种就是地形突变时，飞行器高度不跟随地形改变。&lt;/p&gt;
&lt;p&gt;地形跟随模式就直接用对地测距数据融合加计就可以了。&lt;/p&gt;
&lt;p&gt;第二种模式的话就需要在测距数据发生突变的时候，切换到气压高度。但是切换的时候要进行数据对齐，并且在测距数
      
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="height control" scheme="https://lqucool.github.io/tags/height-control/"/>
    
      <category term="height" scheme="https://lqucool.github.io/tags/height/"/>
    
  </entry>
  
  <entry>
    <title>加计震动滤波</title>
    <link href="https://lqucool.github.io/2017/11/13/%E5%8A%A0%E8%AE%A1%E9%9C%87%E5%8A%A8%E6%BB%A4%E6%B3%A2/"/>
    <id>https://lqucool.github.io/2017/11/13/加计震动滤波/</id>
    <published>2017-11-12T16:00:00.000Z</published>
    <updated>2017-11-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>采集加计数据，400Hz保存到SD卡</li><li>Matlab分析采集到的数据的频谱，确定滤波器参数</li><li>生成IIR滤波器参数</li><li>C++实现并在飞控平台上测试</li><li>采集飞控上滤波后的数据并和Matlab上的滤波效果对比</li></ol></blockquote><h3 id="Matlab设计IIR滤波器"><a href="#Matlab设计IIR滤波器" class="headerlink" title="Matlab设计IIR滤波器"></a>Matlab设计IIR滤波器</h3><blockquote><p>注：Matlab生成IIR滤波器参数，飞控上使用C++实现，实现效果和Matlab设计效果一致。</p><p>​    截止频率不一定合适，后面单独会对电机震动频率做分析，调整截止频率。</p></blockquote><ul><li><p>生成参数<br><img src="http://owsesa4hj.bkt.clouddn.com/IIR%E6%BB%A4%E6%B3%A2%E5%99%A8.png" alt="IIR滤波器"></p><p><img src="http://owsesa4hj.bkt.clouddn.com/FDATool2.png" alt="FDATool2"><img src="http://owsesa4hj.bkt.clouddn.com/FDATool.png" alt="FDATool"></p></li><li><p>滤波前后频谱<br><img src="http://owsesa4hj.bkt.clouddn.com/%E6%BB%A4%E6%B3%A2%E5%89%8D%E5%90%8E%E9%A2%91%E8%B0%B1.png" alt="滤波前后频谱"></p></li><li><p>滤波前后曲线<br><img src="http://owsesa4hj.bkt.clouddn.com/%E6%BB%A4%E6%B3%A2%E5%89%8D%E5%90%8E%E6%9B%B2%E7%BA%BF.png" alt="滤波前后曲线"></p><blockquote><p>飞控上的滤波效果和matlab上滤波的效果是一致的，证明滤波算法没问题。</p></blockquote></li><li><p>飞控上滤波后的数据和Matlab滤波后曲线<br><img src="http://owsesa4hj.bkt.clouddn.com/%E9%A3%9E%E6%8E%A7%E5%92%8CMatlab%E6%BB%A4%E6%B3%A2%E5%90%8E%E5%AF%B9%E6%AF%94.png" alt="飞控和Matlab滤波后对比"></p></li><li><p>飞控上滤波后的数据和Matlab滤波后频谱<br><img src="http://owsesa4hj.bkt.clouddn.com/%E9%A3%9E%E6%8E%A7%E5%92%8CMatlab%E6%BB%A4%E6%B3%A2%E5%90%8E%E9%A2%91%E8%B0%B1%E5%AF%B9%E6%AF%94.png" alt="飞控和Matlab滤波后频谱对比"></p><p>​</p></li></ul><h3 id="电机震动对加计影响"><a href="#电机震动对加计影响" class="headerlink" title="电机震动对加计影响"></a>电机震动对加计影响</h3><blockquote><p>电机震动引起的震动频率在20Hz ~ 30Hz之间，设置截止频率为10Hz，也不一定每一架飞机的震动频率都相同，具体测试吧。</p></blockquote><ul><li><p>Matlab分析数据曲线和数据频谱<br><img src="http://owsesa4hj.bkt.clouddn.com/%E7%94%B5%E6%9C%BA%E9%9C%87%E5%8A%A8%E5%8A%A0%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.png" alt="电机震动加计数据分析"></p></li><li><p>滤波后效果</p><p><img src="http://owsesa4hj.bkt.clouddn.com/%E9%9C%87%E5%8A%A8%E9%A2%91%E8%B0%B1.png" alt="震动频谱"></p><p><img src="http://owsesa4hj.bkt.clouddn.com/%E9%9C%87%E5%8A%A8%E6%9B%B2%E7%BA%BF.png" alt="震动曲线"></p></li></ul><h3 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% ············电机震动分析············</span></div><div class="line"><span class="comment">% 截取起飞前的一段数据</span></div><div class="line">v4 = v4(<span class="number">9200</span>:<span class="number">10000</span>);</div><div class="line">plot(v4);</div><div class="line">hold on;</div><div class="line"></div><div class="line"><span class="comment">% IIR</span></div><div class="line">Fs=<span class="number">400</span>;                         <span class="comment">% 采样率     Hz</span></div><div class="line">n=<span class="number">2</span>;                            <span class="comment">% 阶数  </span></div><div class="line">Fp=<span class="number">10</span>;                          <span class="comment">% 通带截止频率    Hz</span></div><div class="line">Wn=Fp*<span class="number">2</span>/Fs;  </div><div class="line">[Bb,Ba]=butter(n,Wn,<span class="string">'low'</span>)     <span class="comment">% 调用MATLAB butter函数快速设计滤波器  </span></div><div class="line">[BH,BW]=freqz(Bb,Ba);</div><div class="line">Bf=filter(Bb,Ba,v4);</div><div class="line">plot(Bf);</div><div class="line">legend(<span class="string">'滤波前'</span>,<span class="string">'滤波后'</span>);</div><div class="line">title(<span class="string">'电机转动时加计数据'</span>); </div><div class="line"></div><div class="line">figure;</div><div class="line"><span class="comment">% fft 滤波前</span></div><div class="line">n = <span class="built_in">size</span>(v4,<span class="number">1</span>)<span class="number">-1</span>;</div><div class="line">Y  = fft(v4, n);</div><div class="line">Ayy = (<span class="built_in">abs</span>(Y));</div><div class="line">Ayy = Ayy / (n / <span class="number">2</span>);</div><div class="line">Ayy(<span class="number">1</span>) = Ayy(<span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">F=(<span class="number">1</span>:n - <span class="number">1</span>)*Fs/n;</div><div class="line">plot(F(<span class="number">1</span>:n/<span class="number">2</span>),Ayy(<span class="number">1</span>:n/<span class="number">2</span>));</div><div class="line">hold on;</div><div class="line"></div><div class="line"><span class="comment">% fft 滤波后</span></div><div class="line">Y  = fft(Bf, n);</div><div class="line">Ayy = (<span class="built_in">abs</span>(Y));</div><div class="line">Ayy = Ayy / (n / <span class="number">2</span>);</div><div class="line">Ayy(<span class="number">1</span>) = Ayy(<span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">F=(<span class="number">1</span>:n - <span class="number">1</span>)*Fs/n;</div><div class="line">plot(F(<span class="number">1</span>:n/<span class="number">2</span>),Ayy(<span class="number">1</span>:n/<span class="number">2</span>));</div><div class="line">legend(<span class="string">'滤波前'</span>,<span class="string">'滤波后'</span>);</div><div class="line">title(<span class="string">'电机转动时加计数据频谱'</span>); </div><div class="line"><span class="comment">% ············电机震动分析············</span></div></pre></td></tr></table></figure><h3 id="C-IIR"><a href="#C-IIR" class="headerlink" title="C - IIR"></a>C - IIR</h3><blockquote><p>一种比较简单的实现函数，滤波器的参数只能有Matlab生成了，但是其实滤波器的参数也是可以根据频率直接用C语言生成参数的，APM飞控里的 <code>LowPassFilter2p.cpp</code> 有实现的方法，可以移植一下。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IIR_ORDER 2 <span class="comment">// order</span></span></div><div class="line"><span class="keyword">double</span> InPut_IIR[IIR_ORDER + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">double</span> OutPut_IIR[IIR_ORDER + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Fs:400Hz Fp:10Hz</span></div><div class="line"><span class="keyword">double</span> b_IIR[IIR_ORDER + <span class="number">1</span>] = &#123;<span class="number">0.000027f</span>, <span class="number">0.000054f</span>, <span class="number">0.000027f</span>&#125;;  <span class="comment">//b</span></div><div class="line"><span class="keyword">double</span> a_IIR[IIR_ORDER + <span class="number">1</span>] = &#123;<span class="number">1.000000f</span>, <span class="number">-1.985190f</span>, <span class="number">0.985299f</span>&#125;; <span class="comment">//a</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">IIR_I_Filter</span><span class="params">(<span class="keyword">double</span> InData)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">double</span> z1, z2;</div><div class="line">    <span class="keyword">short</span> i;</div><div class="line">    <span class="keyword">double</span> OutData;</div><div class="line">    <span class="keyword">short</span> na = IIR_ORDER + <span class="number">1</span>;</div><div class="line">    <span class="keyword">short</span> nb = IIR_ORDER + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = nb - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        InPut_IIR[i] = InPut_IIR[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    InPut_IIR[<span class="number">0</span>] = InData;</div><div class="line">    <span class="keyword">for</span> (z1 = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; nb; i++)</div><div class="line">    &#123;</div><div class="line">        z1 += InPut_IIR[i] * b_IIR[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i = na - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        OutPut_IIR[i] = OutPut_IIR[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (z2 = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; na; i++)</div><div class="line">    &#123;</div><div class="line">        z2 += OutPut_IIR[i] * a_IIR[i];</div><div class="line">    &#125;</div><div class="line">    OutPut_IIR[<span class="number">0</span>] = z1 - z2;</div><div class="line">    OutData = OutPut_IIR[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> OutData;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;采集加计数据，400Hz保存到SD卡&lt;/li&gt;
&lt;li&gt;Matlab分析采集到的数据的频谱，确定滤波器参数&lt;/li&gt;
&lt;li&gt;生成IIR滤波器参数&lt;/li&gt;
&lt;li&gt;C++实现并在飞控平台上测试&lt;/li&gt;
&lt;li&gt;采集飞控上滤波后的数据
      
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="height control" scheme="https://lqucool.github.io/tags/height-control/"/>
    
      <category term="height" scheme="https://lqucool.github.io/tags/height/"/>
    
  </entry>
  
  <entry>
    <title>关于工作</title>
    <link href="https://lqucool.github.io/2017/10/22/%E5%85%B3%E4%BA%8E%E5%B7%A5%E4%BD%9C/"/>
    <id>https://lqucool.github.io/2017/10/22/关于工作/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>KF融合气压计和加计</p><p>移植了px4的Matrix库，并添加了矩阵求逆运算，但是由于矩阵运算迭代太多次导致其运算效率并不是很高。</p><p>malab生成IIR滤波器参数，对原始气压计进行了初步滤波。</p></li><li><p>互补融合激光测距和加计<br>采用互补滤波融合激光测距和加计，融合之后的数据做了定高，PID控制可以稳定在+-1cm，效果不错，但是融合之后的数据略有波动。有待换成KF测试。</p></li><li>激光测距的数据进行了倾斜角补偿</li><li>油门摇杆控速度</li><li>高度环串级PID</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;KF融合气压计和加计&lt;/p&gt;
&lt;p&gt;移植了px4的Matrix库，并添加了矩阵求逆运算，但是由于矩阵运算迭代太多次导致其运算效率并不是很高。&lt;/p&gt;
&lt;p&gt;malab生成IIR滤波器参数，对原始气压计进行了初步滤波。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;互补
      
    
    </summary>
    
      <category term="work" scheme="https://lqucool.github.io/categories/work/"/>
    
    
      <category term="work" scheme="https://lqucool.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>硬件</title>
    <link href="https://lqucool.github.io/2017/10/22/%E7%A1%AC%E4%BB%B6/"/>
    <id>https://lqucool.github.io/2017/10/22/硬件/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一周一直在做高度控制的算法，每天加班都很晚，晚上也很少有时间做些东西，不过还是趁着这个周末的时间完成了大部分的硬件设计。</p><p>硬件的设计很多还是参考了px4的硬件，也很想尝试下能不能兼容px4固件。</p><blockquote><p>todo: 后面有时间在详细整理硬件电路的设计。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一周一直在做高度控制的算法，每天加班都很晚，晚上也很少有时间做些东西，不过还是趁着这个周末的时间完成了大部分的硬件设计。&lt;/p&gt;
&lt;p&gt;硬件的设计很多还是参考了px4的硬件，也很想尝试下能不能兼容px4固件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;todo: 后面有时
      
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="hardware" scheme="https://lqucool.github.io/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>一些想法</title>
    <link href="https://lqucool.github.io/2017/10/13/%E6%80%9D%E8%B7%AF/"/>
    <id>https://lqucool.github.io/2017/10/13/思路/</id>
    <published>2017-10-12T16:00:00.000Z</published>
    <updated>2017-10-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一点想法</p><a id="more"></a><h3 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h3><p>室内定点定高，室内避障，这些最基础的功能。其实我觉得这更像是一个高集成度的飞控开发平台，集成了高性能飞控平台，测距传感器，光流传感器，避障传感器，通信模组，单双目视觉。这对于开发者来说，单纯的硬件就已经非常有吸引力了。</p><p>飞控算法的话，我肯定是期望朝着商品飞控的目标去做，把飞控的用户体验和飞机的灵活性做好。</p><p>我很喜欢bitcrze团队，能够一起写作专心做喜欢的事，做一些很酷的东西出来，很希望以后有机会能够朝着他们的方向去做。</p><h3 id="室内定位方式"><a href="#室内定位方式" class="headerlink" title="室内定位方式"></a>室内定位方式</h3><ol><li>双目或者目：做视觉里程计或者SLAM</li><li>UWB位置融合光流传感器，我个人很想尝试这种方式，一直觉得这样应该也可以做出不错的效果</li><li>mocap</li></ol><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><ol><li>传感器减震方式，要不要独立imu模块，单独做减震</li><li>气压计的处理</li></ol><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li><p>软件架构</p></li><li><p>操作系统</p></li><li><p>底层驱动</p></li><li><p>姿态解算</p><p>ekf, ukf, mohony互补..</p></li><li><p>姿态控制</p><p>pid, back-step</p></li><li><p>高度解算</p><p>kf, ukf, 互补, px4算法</p></li><li><p>高度控制</p><p>pid</p><ul><li>油门控制方式</li><li>手动起飞算法</li><li>手动降落算法</li><li>自动起飞</li><li>自动降落</li><li>气压计和测距的切换</li><li>地形跟随模式</li><li>落地检测</li></ul></li><li><p>位置解算</p><p>ekf, ukf</p></li><li><p>位置控制</p><p>pid</p><p>自适应</p></li><li><p>最优路径生成</p></li><li><p>路径跟随算法</p></li><li><p>避障算法</p></li><li><p>空翻</p></li><li><p>交互</p></li><li><p>视觉交互</p><p>​</p></li></ol><h3 id="硬件和一些结构"><a href="#硬件和一些结构" class="headerlink" title="硬件和一些结构"></a>硬件和一些结构</h3><p>后面再针对硬件电路分析单独写一个文章吧</p><ul><li><p>机架</p></li><li><p>电机</p></li><li><p>电调</p><p>四合一电调，只有几克重</p></li><li><p>电池</p></li><li><p>遥控器接收机</p></li><li><p>飞控</p><p>体积35mm*35mm</p><p>尽量兼容px4</p></li><li><p>高级控制板（可选）</p><p>用来做飞控算法或者视觉处理</p></li><li><p>双目（可选）</p></li><li><p>TOF测距</p><p>可以选用北醒的TOF测距，可以到12米远，具体需测试</p><p>Hypersen我们公司用的这家的传感器，也是TOF的，但是距离可以到30米</p></li><li><p>光流</p><p>可以采用bitcraze的开源的</p><p>淘宝有一款五十多块钱的，很便宜，过段时间买回来测试下</p></li><li><p>TOF测距避障</p><p>VL53L0X,体积超小，飞行器四面各一个，用来避障。</p></li><li><p>LED</p><p>用来灯光交互</p></li><li><p>GPS</p><p>Ublox M8N</p></li><li><p>通信</p><p>2.4G数传或者wifi模组</p><hr></li></ul><blockquote><p>2017.10.26</p><p>最近想了想，觉得室内飞行还是小飞机比较好些，既方便调试又方便飞行，特别是现在住的地方也不大，所以一直都在挑小飞机的硬件。</p><p>130轴距是个不错的选择，采用1106电机，6000KV，3寸碳桨，15A四合一电调，飞控自己做成30mm*30mm，再加上激光测距和光流。</p><p>1106电机 6.6g一个，四个26.4g，3020桨的时候单个电机能到300g以上最大推力，很暴力</p><p>激光测距只有5~6g中，体积也很小</p><p>光流体积20mm*20mm，也可以自己做，等飞控做稳定了还是想自己做光流和TOF模块</p><p>电池可以用2S或者3S的520mah，14500电池看起来也可以，就是不知道重量合适不合适</p><p>等发了工资要找机会整一套，还有好多工具需要啊，风枪、焊台、调试夹、放大镜、电子秤。。。还需要一套螺丝刀，之前的这些装备毕业的时候全都送人了</p><p>还有好多论文需要一个个去研究：</p><p>关于姿态解算的论文，px4的论文，bitcraze的论文，还有ETH的一些论文，路径生成和控制的论文。。。慢慢啃吧</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一点想法&lt;/p&gt;
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="ideas" scheme="https://lqucool.github.io/tags/ideas/"/>
    
  </entry>
  
  <entry>
    <title>位置控制-px4</title>
    <link href="https://lqucool.github.io/2017/10/12/%E4%BD%8D%E7%BD%AE%E6%8E%A7%E5%88%B6-px4/"/>
    <id>https://lqucool.github.io/2017/10/12/位置控制-px4/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2017-10-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要分析px4的位置控制方式，源码位于mc_pos_control.cpp文件</p><p>未完待续！</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>todo</p></blockquote><hr><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><blockquote><p>todo</p></blockquote><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote><p>todo</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要分析px4的位置控制方式，源码位于mc_pos_control.cpp文件&lt;/p&gt;
&lt;p&gt;未完待续！&lt;/p&gt;
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="position control" scheme="https://lqucool.github.io/tags/position-control/"/>
    
  </entry>
  
  <entry>
    <title>高度控制</title>
    <link href="https://lqucool.github.io/2017/10/12/%E9%AB%98%E5%BA%A6%E6%8E%A7%E5%88%B6/"/>
    <id>https://lqucool.github.io/2017/10/12/高度控制/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2017-10-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>关于高度控制有两种不同的控制方式：</p><ol><li>遥控器油门代表期望速度，回中代表期望速度为0，油门向上期望速度为正，油门向下期望速度为负。油门推进时，高度环只有速度环，位置环不起作用。油门回中，期望速度为0，此时飞行器悬停，位置环和速度环嵌套。</li></ol><blockquote><p>notice:油门回中时，期望速度即为0，但是实际速度并不会立即为0，由于速度环的作用，实际速度会逐渐减为0.如果在油门回中时也就是期望速度为0时，立即锁定当前高度，则飞行器会先上升一段高度，等到实际速度减为0，再下降悬停到锁定的高度，也就是油门回中时的高度。这种方式用户体验并不是很好，会给人一种很不稳的感觉。所以更好的应该是油门回中之后，飞行器应该悬停在实际飞行速度减为0的时候的高度而不是油门回中时的高度。</p></blockquote><a id="more"></a><ol><li>遥控器油门还是代表期望速度，但是把期望速度积分得出期望位置。油门不回中时，期望速度不为0，积分后期望位置在不停更新，油门推进时由位置环和速度环嵌套。油门回中时，期望速度为0，积分后的期望位置不发生改变，飞行器即悬停。</li></ol><p>其实两种方式不同的地方就是第一种推油门的时候是控的目标速度，只有速度环，第二种推油门的时候就是控的目标位置，位置环和速度环嵌套。</p><p>想要获得比较好的效果，问题还是有很多的：</p><ol><li>高度的PID控制器一般都有三环，位置环-&gt;速度环-&gt;加速度环，PID想要比较好的效果需要有几点注意的地方，比如系统的延时，数据的更新频率，以及数据的精度。</li><li>激光测距的更新频率比较慢，一般就20Hz~100Hz之间，要想比较好的效果的话这种控制频率就有点慢了，所以激光的数据还是要和加计的数据进行融合，融合了加计之后可以提高一些响应速度，但是肯定也会引入一定的噪声。所以在融合的时候要在响应速度和数据的波动上做一些处理，达到最好效果。</li></ol><hr><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><blockquote><p>todo:待补充</p></blockquote><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote><p>todo:待完善</p></blockquote><h4 id="控制目标速度"><a href="#控制目标速度" class="headerlink" title="控制目标速度"></a>控制目标速度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> _dst_vel_z;<span class="comment">// destination velocity</span></div><div class="line"><span class="keyword">float</span> _est_vel_z;<span class="comment">// estimate velocity</span></div><div class="line"><span class="keyword">float</span> _dst_pos_z;<span class="comment">// destination position</span></div><div class="line"><span class="keyword">float</span> _est_pos_z;<span class="comment">// estimate position</span></div><div class="line"><span class="keyword">bool</span> _dst_pos_z_locked;</div><div class="line"></div><div class="line"><span class="comment">// calc desired pos_z by velocity_z</span></div><div class="line"><span class="keyword">if</span> ( fabsf( _dst_vel_z ) &lt; <span class="number">5</span> ) &#123; <span class="comment">// usr wanna stop</span></div><div class="line">    <span class="keyword">if</span> ( fabsf( _est_vel_z ) &lt; <span class="number">15</span> ) &#123; <span class="comment">// craft is slow enough</span></div><div class="line">        <span class="keyword">if</span> ( !_dst_pos_z_locked ) &#123; <span class="comment">// pos_z not fixed</span></div><div class="line">            _dst_pos_z = _est_pos_z;</div><div class="line">            _dst_pos_z_locked = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// craft is fast。这里有一个风险：永远控不到较小的速度，位移环就一直不起作用</span></div><div class="line">        <span class="keyword">if</span> ( !_dst_pos_z_locked ) &#123;</div><div class="line">            <span class="comment">// craft is fast, but not fixed now, ctrl speed until slow enough</span></div><div class="line">            _dst_pos_z = _est_pos_z;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//else&#123;</span></div><div class="line">        <span class="comment">// else craft is speed up by extern force( wind, sudden turn-around. etc... )</span></div><div class="line">        <span class="comment">// desired position should still hold( but maybe changed when difference is too large )</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123; <span class="comment">// users wanna move</span></div><div class="line">    _dst_pos_z = _est_pos_z;</div><div class="line">    _dst_pos_z_locked = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;关于高度控制有两种不同的控制方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遥控器油门代表期望速度，回中代表期望速度为0，油门向上期望速度为正，油门向下期望速度为负。油门推进时，高度环只有速度环，位置环不起作用。油门回中，期望速度为0，此时飞行器悬停，位置环和速度环嵌套。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;notice:油门回中时，期望速度即为0，但是实际速度并不会立即为0，由于速度环的作用，实际速度会逐渐减为0.如果在油门回中时也就是期望速度为0时，立即锁定当前高度，则飞行器会先上升一段高度，等到实际速度减为0，再下降悬停到锁定的高度，也就是油门回中时的高度。这种方式用户体验并不是很好，会给人一种很不稳的感觉。所以更好的应该是油门回中之后，飞行器应该悬停在实际飞行速度减为0的时候的高度而不是油门回中时的高度。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="height control" scheme="https://lqucool.github.io/tags/height-control/"/>
    
      <category term="height" scheme="https://lqucool.github.io/tags/height/"/>
    
  </entry>
  
  <entry>
    <title>BeagleBone Blue 编译部署</title>
    <link href="https://lqucool.github.io/2017/10/09/Beaglebone%20%E7%BC%96%E8%AF%91%E9%83%A8%E7%BD%B2/"/>
    <id>https://lqucool.github.io/2017/10/09/Beaglebone 编译部署/</id>
    <published>2017-10-08T16:00:00.000Z</published>
    <updated>2017-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想找一款能够快速开发的，高性能的板子，挑来挑去只有beaglebone blue最为合适，虽然价格略贵。</p><blockquote><p>Beaglebone blue 搭载Debian系统，之前完全没玩过嵌入式linux，所以上手还是需要一点时间，今天查了下资料大概了解了开发步骤。主要有以下几种方式：</p><ol><li>PC上使用VS Code或者Sublime 进行代码编辑，之后使用WinSCP部署到Beaglebone上，在Beaglebone上使用makefile进行编译。也是比较高效的一种方法吧。</li><li>Visual Studio 2017 可以进行linux嵌入式开发了，可以直接在PC上编译生成可执行文件，然后直接在线debug，非常方便。但是我用Visual Studio的时候，一些linux头文件找不到，还有一些beaglebone的API头文件缺失，一直没有编译成功，可能是我方法有问题，这个后面有时间在解决。不过Hello World还是可以运行成功的。</li><li>还有很多开发者是在linux上使用esplice或者Qt Creator再加上交叉编译工具进行开发的，也是可以直接运行部署到beaglebone上的，不过这种方法我并没有进行尝试。</li></ol></blockquote><p>还是先记录下第一种方法怎么操作的吧：</p><ol><li>下载安装WinSCP<br><img src="http://owsesa4hj.bkt.clouddn.com/WinSCP%E7%99%BB%E5%BD%95.png" alt="avatar"><br>2.填入Beaglebone的主机名，端口号，还有用户名和密码，点击登录即可。<br>登录之后的界面：<br><img src="http://owsesa4hj.bkt.clouddn.com/WinSCP%E7%95%8C%E9%9D%A2.png" alt="avatar"><br>左边是PC的文件目录，右边是Beaglebone的文件目录，如果要复制文件直接拖过去就行了，挺方便的。</li></ol><p>3.在/home/debian文件夹中新建BeaglePilot文件夹，存放我们的工程项目。把我们在PC上写好的.c和Makefile直接拖过来。</p><p>4.在Putty或者WinSCP直接打开一个终端进入BeaglePilot目录，<code>ls</code>会看到我们刚拖进来的两个文件，然后<code>make BeaglePilot</code>编译生成可执行文件，这时候再<code>ls</code>就会看到生成的.o文件了，<code>sudo ./BeaglePilot</code>命令之后输入密码就可以执行我们的代码了。<br><img src="http://owsesa4hj.bkt.clouddn.com/putty%E6%93%8D%E4%BD%9C.png" alt="avatar"></p><p>这样就可以直接在PC上用自己熟悉的编辑器写完代码，部署到Beaglebone上面，直接Make，然后执行，非常方便。</p><p><img src="http://owsesa4hj.bkt.clouddn.com/B%E5%86%99%E4%BB%A3%E7%A0%81%E7%95%8C%E9%9D%A2.png" alt="avatar"></p><p>后面有时间还是研究下后面两种调试方式吧，看下哪种更高效一些，接下来就可以快速验证自己的算法了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直想找一款能够快速开发的，高性能的板子，挑来挑去只有beaglebone blue最为合适，虽然价格略贵。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Beaglebone blue 搭载Debian系统，之前完全没玩过嵌入式linux，所以上手还是需要一点时间，今天查了下资
      
    
    </summary>
    
      <category term="beaglebone" scheme="https://lqucool.github.io/categories/beaglebone/"/>
    
    
      <category term="beaglebone" scheme="https://lqucool.github.io/tags/beaglebone/"/>
    
  </entry>
  
  <entry>
    <title>高度融合</title>
    <link href="https://lqucool.github.io/2017/09/24/%E9%AB%98%E5%BA%A6%E8%9E%8D%E5%90%88/"/>
    <id>https://lqucool.github.io/2017/09/24/高度融合/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2017-10-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://owsesa4hj.bkt.clouddn.com/publications1.jpg" alt="avatar"></p><a id="more"></a><h3 id="传感器数据"><a href="#传感器数据" class="headerlink" title="传感器数据"></a>传感器数据</h3><p>数据融合所需要的传感器数据：</p><ul><li>1.气压计：在没有超声波，激光测距等传感器的时候，算是比较可靠的一个传感器了，但是其效果也就是仅仅能用，想要比较好的效果的话还是要超声波或激光的。气压计目前比较好的精度也就是10cm，的确上下移动10cm也会有效果，但是其噪声实在太大，噪声波动一般都在50cm+，所以一般都会融合加计，融合的算法有很多种，融合之后的效果在短时间内还可以接受，可以控制在5-10cm左右，但是长时间，比如静止放置十分钟或者更久，就会产生比较大的漂移，一般都会漂出去半米远，所以只用气压计融合加计并不能做出一个特别好的定高效果。</li><li>2.加计，加计的数据要是姿态解算之后的数据，也就是大地坐标系下z轴加速度计数据，要减去重力加速度。姿态解算之后的加计噪声应该会比较小了。</li><li>3.超声波，这个我没怎么用过，但是一直感觉这玩意效果也不是很好，距离又近，一般就只有3-5米远吧，个别也有更远一些的，但是价格就贵了，发射角又大，而且非常容易受到振动和气流的影响。</li><li>4.激光传感器，激光传感器本身的价格是非常贵的，但是最近TOF测距的技术发展很快，国内已经有TOF测距可以到12米甚至更远的距离，价格也不算贵，精度是非常高，cm级的精度了，更新频率几十Hz到几百Hz的都有。</li></ul><hr><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><p>1.互补滤波，应该是比较简单的一种算法。把气压计得出的高度数据微分得出速度，加计积分也得出速度，之后相互融合。</p></li><li><p>2.ekf，也就是扩展卡尔曼了，不过由于高度的状态方程是线性的，所以kf和ekf也就差别不大，ekf的算法关键的就是状态转移方程的建立了，不同的状态方程最后得出的效果也会略有区别，当然调参的小技巧可能也会不大一样，不过重点都是Q,R的参数调试。</p></li><li><p>3.还有一种处理方式就是px4中最开始使用的一种算法，其实也是预测-校验的一种思路，只不过比ekf要简单一些。</p></li></ul><h4 id="KF融合"><a href="#KF融合" class="headerlink" title="KF融合"></a>KF融合</h4><h5 id="公式"><a href="#公式" class="headerlink" title="公式"></a><em>公式</em></h5><p>卡尔曼算法最重要的就是状态方程和转移方程的建立了，会直接影响到最终数据融合的效果。<br>整个算法过程分为两个部分，预测和矫正：</p><p><strong><em>Predict</em></strong>:</p><p>   <em>Predicted (a priori) state estimate:</em></p><script type="math/tex; mode=display">\hat{x}_{k|k-1} = F_kx_{k-1|k-1} + B_ku_k</script><p>  <em>Predicted (a priori) estimate covariance:</em></p><script type="math/tex; mode=display">P_{k|k-1} = F_kP_{k-1|k-1}F^T_{k} + Q_k</script><p><strong><em>Update</em></strong>:</p><p>  <em>Innovation or measurement pre-fit residual:</em>    </p><script type="math/tex; mode=display">\widetilde{y}_k = z_k - H_k\hat{x}_{k|k-1}</script><p>  <em>Innovation (or pre-fit residual) covariance:</em></p><script type="math/tex; mode=display">S_k = R_k + H_kP_{k|k-1}H^T_k</script><p>  <em>Optimal Kalman gain:</em></p><script type="math/tex; mode=display">K_k = P_{k|k-1}H^T_kS^{-1}_k</script><p>  <em>Updated (a posteriori) state estimate:</em></p><script type="math/tex; mode=display">\hat{x}_{k|k} = \hat{x}_{k|k-1}+ K_k\widetilde{y}_k</script><p>  <em>Updated (a posteriori) estimate covariance:</em></p><script type="math/tex; mode=display">P_{k|k-1} = (I - K_kH_k)P_{k|k-1}</script><p>  <em>Measurement post-fit residual:</em></p><script type="math/tex; mode=display">\widetilde{y}_{k|k} = z_k - H_k\hat{x}_{k|k}</script><h5 id="状态方程"><a href="#状态方程" class="headerlink" title="状态方程"></a><em>状态方程</em></h5><script type="math/tex; mode=display">x = \left[ \begin{array}{ccc}    h \\\    v \\\    a    \end{array} \right] \\\    \\\    F = \left[ \begin{array}{ccc}    1 & t & 0 \\\    0 & 1 & t  \\\    0 & 0 & 1    \end{array} \right] \\\    \\\    Z = \left[ \begin{array}{ccc}    h_{baro} \\\    acc_{ned}    \end{array} \right]\\\    \\\    H = \left[ \begin{array}{ccc}    1 & 0 & 0 \\\    0 & 0 & 1     \end{array} \right]</script><p>即</p><script type="math/tex; mode=display">\left[ \begin{array}{ccc}    h+vt \\\    v+at \\\    a    \end{array} \right] = \left[ \begin{array}{ccc}    1 & t & 0 \\\    0 & 1 & t  \\\    0 & 0 & 1    \end{array} \right]\left[ \begin{array}{ccc}    h \\\    v \\\    a    \end{array} \right]\\\    \\\    \left[ \begin{array}{ccc}    h_{err} \\\    acc_{err}    \end{array} \right]=    \left[ \begin{array}{ccc}    h_{baro} \\\    acc_{ned}    \end{array} \right] -    \left[ \begin{array}{ccc}    1 & 0 & 0 \\\    0 & 0 & 1     \end{array} \right]    \left[ \begin{array}{ccc}    h \\\    v \\\    a    \end{array} \right]</script><p>设置参数</p><script type="math/tex; mode=display">P = \left[ \begin{array}{ccc}    0 & t & 60 \\\    1 & 1 & 3  \\\    2 & 2 & 0.1    \end{array} \right] \\\    \\\    Q = \left[ \begin{array}{ccc}    0.0000001 & 0 & 0 \\\    0 & 0.000005 & 0  \\\    0 & 0 & 0.05    \end{array} \right] \\\    \\\    R = \left[ \begin{array}{ccc}    0 & 0 & 15000 \\\    0 & 0 & 200    \end{array} \right] \\\    \\\        I = \left[ \begin{array}{ccc}    0 & 0 & 0 \\\    0 & 1 & 0  \\\    0 & 0 & 1    \end{array} \right] \\\</script><p>关于R和Q矩阵参数的设置需要一起调试，Q越小越相信预测值，R越小越相信测量值，两个值相互影响，最优参数不唯一的，根据实际情况调试，调试时可以先观测输出的加速度曲线，因为速度一部分是由加速度积分得到的，如果加速度都有问题的话速度的效果肯定也不会好，同理接着调试速度的参数，最后调试高度的参数。</p><p>测量值其实就是输入的气压计高度，预测值的话则是加计积分和气压计高度融合得来的。</p><p>过于相信预测值的话，也就是Q过小或者R过大，会造成收敛速度过慢，同时由于预测值是由加速度积分来的，所以飞机的震动会对加速度造成影响，也会对融合的输出值造成比较大影响，其次，如果在刚上电时加速度计有偏移，则会对融合的输出值产生很大影响，如果这个时候Q过小或者R过大，很有可能造成收敛时间特别长，虽然最后也能够收敛。</p><p>如果过于相信测量值的话，由于气压计的噪声非常大，肯定会对输出值的平坦度造成一些影响，短时间内的数据可能不够平滑。</p><h5 id="code"><a href="#code" class="headerlink" title="code"></a><em>code</em></h5><h6 id="kf参数"><a href="#kf参数" class="headerlink" title="kf参数"></a><em>kf参数</em></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">alt_est_kf.set_H(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">alt_est_kf.set_H(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">alt_est_kf.set_P(<span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>);</div><div class="line">alt_est_kf.set_P(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line">alt_est_kf.set_P(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.1f</span>);</div><div class="line"></div><div class="line">alt_est_kf.set_Q(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.0000001f</span>);</div><div class="line">alt_est_kf.set_Q(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0.000005f</span>);</div><div class="line">alt_est_kf.set_Q(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.05f</span>);</div><div class="line"></div><div class="line">alt_est_kf.set_R(<span class="number">0</span>, <span class="number">0</span>, <span class="number">15000</span>);</div><div class="line">alt_est_kf.set_R(<span class="number">1</span>, <span class="number">1</span>, <span class="number">200</span>);</div><div class="line"></div><div class="line">alt_est_kf.set_F(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">alt_est_kf.set_F(<span class="number">0</span>, <span class="number">1</span>, Ts_q);</div><div class="line">alt_est_kf.set_F(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">alt_est_kf.set_F(<span class="number">1</span>, <span class="number">2</span>, Ts_q);</div><div class="line">alt_est_kf.set_F(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">alt_est_kf.set_I(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">alt_est_kf.set_I(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">alt_est_kf.set_I(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">alt_est_kf.set_X(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">alt_est_kf.set_X(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">alt_est_kf.set_X(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure><h6 id="kf"><a href="#kf" class="headerlink" title="kf"></a><em>kf</em></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ekf_h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __ekf_h</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ss_matrix_q.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> matrix;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *  M is the number of status, N is the number of observe</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> M, <span class="keyword">int</span> N&gt;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ekf</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"></div><div class="line">  <span class="keyword">protected</span>:</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, M, M&gt; P;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, M, M&gt; Q;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, N, N&gt; R;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, M, M&gt; I;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, M, M&gt; F;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, N, M&gt; H;</div><div class="line"></div><div class="line">    Matrix&lt;<span class="keyword">float</span>, M, <span class="number">1</span>&gt; X;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, N, <span class="number">1</span>&gt; Z;</div><div class="line"></div><div class="line">  <span class="keyword">private</span>:</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, N, N&gt; S;</div><div class="line">    Matrix&lt;<span class="keyword">float</span>, M, N&gt; K;</div><div class="line"></div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_P</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; P(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_Q</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; Q(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_R</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; R(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_I</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; I(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_F</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; F(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_H</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; H(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_X</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; X(m, n) = value; &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_Z</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">float</span> value)</span> </span>&#123; Z(m, n) = value; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">float</span> <span class="title">get_X</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> X(m, n); &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">predict</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">correct</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> M, <span class="keyword">int</span> N&gt;</div><div class="line"><span class="keyword">void</span> ekf&lt;M, N&gt;::predict()</div><div class="line">&#123;</div><div class="line"></div><div class="line">    X = F * X;</div><div class="line"></div><div class="line">    P = F * P * F.transpose() + Q;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> M, <span class="keyword">int</span> N&gt;</div><div class="line"><span class="keyword">void</span> ekf&lt;M, N&gt;::correct()</div><div class="line">&#123;</div><div class="line"></div><div class="line">    S = H * P * H.transpose() + R;</div><div class="line"></div><div class="line">    K = P * H.transpose() * S.inverse();</div><div class="line"></div><div class="line">    X = X + K * (Z - H * X);</div><div class="line"></div><div class="line">    P = (I - K * H) * P;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><h4 id="互补融合"><a href="#互补融合" class="headerlink" title="互补融合"></a>互补融合</h4><blockquote><p>TODO</p></blockquote><h4 id="px4高度估算"><a href="#px4高度估算" class="headerlink" title="px4高度估算"></a>px4高度估算</h4><blockquote><p>TODO</p></blockquote><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><blockquote><p>todo:待补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://owsesa4hj.bkt.clouddn.com/publications1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="quadcopter" scheme="https://lqucool.github.io/categories/quadcopter/"/>
    
    
      <category term="quadcopter" scheme="https://lqucool.github.io/tags/quadcopter/"/>
    
      <category term="height" scheme="https://lqucool.github.io/tags/height/"/>
    
      <category term="height fusion" scheme="https://lqucool.github.io/tags/height-fusion/"/>
    
  </entry>
  
</feed>
